// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GegoArtAdded extends ethereum.Event {
  get params(): GegoArtAdded__Params {
    return new GegoArtAdded__Params(this);
  }
}

export class GegoArtAdded__Params {
  _event: GegoArtAdded;

  constructor(event: GegoArtAdded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get createdTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get author(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get resName(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class GegoArtBurn extends ethereum.Event {
  get params(): GegoArtBurn__Params {
    return new GegoArtBurn__Params(this);
  }
}

export class GegoArtBurn__Params {
  _event: GegoArtBurn;

  constructor(event: GegoArtBurn) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFTReceived extends ethereum.Event {
  get params(): NFTReceived__Params {
    return new NFTReceived__Params(this);
  }
}

export class NFTReceived__Params {
  _event: NFTReceived;

  constructor(event: NFTReceived) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class GovernanceTransferred extends ethereum.Event {
  get params(): GovernanceTransferred__Params {
    return new GovernanceTransferred__Params(this);
  }
}

export class GovernanceTransferred__Params {
  _event: GovernanceTransferred;

  constructor(event: GovernanceTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GegoArtFactory___gegoArtsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: Address;
  value6: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: Address,
    value6: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    return map;
  }
}

export class GegoArtFactory__getGegoArtResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    return map;
  }
}

export class GegoArtFactory extends ethereum.SmartContract {
  static bind(address: Address): GegoArtFactory {
    return new GegoArtFactory("GegoArtFactory", address);
  }

  burn(tokenId: BigInt): boolean {
    let result = super.call("burn", "burn(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_burn(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("burn", "burn(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(
    resName: string,
    to: Address,
    tokenAddress: Address,
    tokenAmount: BigInt
  ): BigInt {
    let result = super.call(
      "mint",
      "mint(string,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromString(resName),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_mint(
    resName: string,
    to: Address,
    tokenAddress: Address,
    tokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(string,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromString(resName),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _burnTime(): BigInt {
    let result = super.call("_burnTime", "_burnTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try__burnTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_burnTime", "_burnTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _costAddress(): Address {
    let result = super.call("_costAddress", "_costAddress():(address)", []);

    return result[0].toAddress();
  }

  try__costAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("_costAddress", "_costAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _costAmount(): BigInt {
    let result = super.call("_costAmount", "_costAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try__costAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_costAmount", "_costAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _costToken(): Address {
    let result = super.call("_costToken", "_costToken():(address)", []);

    return result[0].toAddress();
  }

  try__costToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("_costToken", "_costToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _gegoArt(): Address {
    let result = super.call("_gegoArt", "_gegoArt():(address)", []);

    return result[0].toAddress();
  }

  try__gegoArt(): ethereum.CallResult<Address> {
    let result = super.tryCall("_gegoArt", "_gegoArt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _gegoArtId(): BigInt {
    let result = super.call("_gegoArtId", "_gegoArtId():(uint256)", []);

    return result[0].toBigInt();
  }

  try__gegoArtId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_gegoArtId", "_gegoArtId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _gegoArts(param0: BigInt): GegoArtFactory___gegoArtsResult {
    let result = super.call(
      "_gegoArts",
      "_gegoArts(uint256):(uint256,uint256,uint256,uint256,address,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GegoArtFactory___gegoArtsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toString()
    );
  }

  try__gegoArts(
    param0: BigInt
  ): ethereum.CallResult<GegoArtFactory___gegoArtsResult> {
    let result = super.tryCall(
      "_gegoArts",
      "_gegoArts(uint256):(uint256,uint256,uint256,uint256,address,address,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GegoArtFactory___gegoArtsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toString()
      )
    );
  }

  _governance(): Address {
    let result = super.call("_governance", "_governance():(address)", []);

    return result[0].toAddress();
  }

  try__governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("_governance", "_governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _hasReward(): boolean {
    let result = super.call("_hasReward", "_hasReward():(bool)", []);

    return result[0].toBoolean();
  }

  try__hasReward(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_hasReward", "_hasReward():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _isUserStart(): boolean {
    let result = super.call("_isUserStart", "_isUserStart():(bool)", []);

    return result[0].toBoolean();
  }

  try__isUserStart(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_isUserStart", "_isUserStart():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _minters(param0: Address): boolean {
    let result = super.call("_minters", "_minters(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try__minters(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("_minters", "_minters(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _rewardAmount(): BigInt {
    let result = super.call("_rewardAmount", "_rewardAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try__rewardAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_rewardAmount",
      "_rewardAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _rewardToken(): Address {
    let result = super.call("_rewardToken", "_rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try__rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("_rewardToken", "_rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGegoArt(tokenId: BigInt): GegoArtFactory__getGegoArtResult {
    let result = super.call(
      "getGegoArt",
      "getGegoArt(uint256):(uint256,uint256,uint256,address,address,string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new GegoArtFactory__getGegoArtResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toString()
    );
  }

  try_getGegoArt(
    tokenId: BigInt
  ): ethereum.CallResult<GegoArtFactory__getGegoArtResult> {
    let result = super.tryCall(
      "getGegoArt",
      "getGegoArt(uint256):(uint256,uint256,uint256,address,address,string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GegoArtFactory__getGegoArtResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toString()
      )
    );
  }
}

export class AddMinterCall extends ethereum.Call {
  get inputs(): AddMinterCall__Inputs {
    return new AddMinterCall__Inputs(this);
  }

  get outputs(): AddMinterCall__Outputs {
    return new AddMinterCall__Outputs(this);
  }
}

export class AddMinterCall__Inputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddMinterCall__Outputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get gegoArtToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get costToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get costAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get costAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get burnTime(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get isUserStart(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get hasReward(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get resName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RemoveMinterCall extends ethereum.Call {
  get inputs(): RemoveMinterCall__Inputs {
    return new RemoveMinterCall__Inputs(this);
  }

  get outputs(): RemoveMinterCall__Outputs {
    return new RemoveMinterCall__Outputs(this);
  }
}

export class RemoveMinterCall__Inputs {
  _call: RemoveMinterCall;

  constructor(call: RemoveMinterCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveMinterCall__Outputs {
  _call: RemoveMinterCall;

  constructor(call: RemoveMinterCall) {
    this._call = call;
  }
}

export class SetBurnTimeCall extends ethereum.Call {
  get inputs(): SetBurnTimeCall__Inputs {
    return new SetBurnTimeCall__Inputs(this);
  }

  get outputs(): SetBurnTimeCall__Outputs {
    return new SetBurnTimeCall__Outputs(this);
  }
}

export class SetBurnTimeCall__Inputs {
  _call: SetBurnTimeCall;

  constructor(call: SetBurnTimeCall) {
    this._call = call;
  }

  get burnTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBurnTimeCall__Outputs {
  _call: SetBurnTimeCall;

  constructor(call: SetBurnTimeCall) {
    this._call = call;
  }
}

export class SetGegoArtContractCall extends ethereum.Call {
  get inputs(): SetGegoArtContractCall__Inputs {
    return new SetGegoArtContractCall__Inputs(this);
  }

  get outputs(): SetGegoArtContractCall__Outputs {
    return new SetGegoArtContractCall__Outputs(this);
  }
}

export class SetGegoArtContractCall__Inputs {
  _call: SetGegoArtContractCall;

  constructor(call: SetGegoArtContractCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGegoArtContractCall__Outputs {
  _call: SetGegoArtContractCall;

  constructor(call: SetGegoArtContractCall) {
    this._call = call;
  }
}

export class SetGegoArtIdCall extends ethereum.Call {
  get inputs(): SetGegoArtIdCall__Inputs {
    return new SetGegoArtIdCall__Inputs(this);
  }

  get outputs(): SetGegoArtIdCall__Outputs {
    return new SetGegoArtIdCall__Outputs(this);
  }
}

export class SetGegoArtIdCall__Inputs {
  _call: SetGegoArtIdCall;

  constructor(call: SetGegoArtIdCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGegoArtIdCall__Outputs {
  _call: SetGegoArtIdCall;

  constructor(call: SetGegoArtIdCall) {
    this._call = call;
  }
}

export class SetHasRewardCall extends ethereum.Call {
  get inputs(): SetHasRewardCall__Inputs {
    return new SetHasRewardCall__Inputs(this);
  }

  get outputs(): SetHasRewardCall__Outputs {
    return new SetHasRewardCall__Outputs(this);
  }
}

export class SetHasRewardCall__Inputs {
  _call: SetHasRewardCall;

  constructor(call: SetHasRewardCall) {
    this._call = call;
  }

  get has(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetHasRewardCall__Outputs {
  _call: SetHasRewardCall;

  constructor(call: SetHasRewardCall) {
    this._call = call;
  }
}

export class SetResMapCall extends ethereum.Call {
  get inputs(): SetResMapCall__Inputs {
    return new SetResMapCall__Inputs(this);
  }

  get outputs(): SetResMapCall__Outputs {
    return new SetResMapCall__Outputs(this);
  }
}

export class SetResMapCall__Inputs {
  _call: SetResMapCall;

  constructor(call: SetResMapCall) {
    this._call = call;
  }

  get resName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetResMapCall__Outputs {
  _call: SetResMapCall;

  constructor(call: SetResMapCall) {
    this._call = call;
  }
}

export class SetRewardAmountCall extends ethereum.Call {
  get inputs(): SetRewardAmountCall__Inputs {
    return new SetRewardAmountCall__Inputs(this);
  }

  get outputs(): SetRewardAmountCall__Outputs {
    return new SetRewardAmountCall__Outputs(this);
  }
}

export class SetRewardAmountCall__Inputs {
  _call: SetRewardAmountCall;

  constructor(call: SetRewardAmountCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardAmountCall__Outputs {
  _call: SetRewardAmountCall;

  constructor(call: SetRewardAmountCall) {
    this._call = call;
  }
}

export class SetRewardContractCall extends ethereum.Call {
  get inputs(): SetRewardContractCall__Inputs {
    return new SetRewardContractCall__Inputs(this);
  }

  get outputs(): SetRewardContractCall__Outputs {
    return new SetRewardContractCall__Outputs(this);
  }
}

export class SetRewardContractCall__Inputs {
  _call: SetRewardContractCall;

  constructor(call: SetRewardContractCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardContractCall__Outputs {
  _call: SetRewardContractCall;

  constructor(call: SetRewardContractCall) {
    this._call = call;
  }
}

export class SetUserStartCall extends ethereum.Call {
  get inputs(): SetUserStartCall__Inputs {
    return new SetUserStartCall__Inputs(this);
  }

  get outputs(): SetUserStartCall__Outputs {
    return new SetUserStartCall__Outputs(this);
  }
}

export class SetUserStartCall__Inputs {
  _call: SetUserStartCall;

  constructor(call: SetUserStartCall) {
    this._call = call;
  }

  get start(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetUserStartCall__Outputs {
  _call: SetUserStartCall;

  constructor(call: SetUserStartCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
