// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GegoArt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GegoArt entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GegoArt entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GegoArt", id.toString(), this);
  }

  static load(id: string): GegoArt | null {
    return store.get("GegoArt", id) as GegoArt | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get blockNum(): BigInt {
    let value = this.get("blockNum");
    return value.toBigInt();
  }

  set blockNum(value: BigInt) {
    this.set("blockNum", Value.fromBigInt(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get author(): Bytes {
    let value = this.get("author");
    return value.toBytes();
  }

  set author(value: Bytes) {
    this.set("author", Value.fromBytes(value));
  }

  get resName(): string {
    let value = this.get("resName");
    return value.toString();
  }

  set resName(value: string) {
    this.set("resName", Value.fromString(value));
  }

  get isExist(): boolean {
    let value = this.get("isExist");
    return value.toBoolean();
  }

  set isExist(value: boolean) {
    this.set("isExist", Value.fromBoolean(value));
  }
}

export class GegoTokenV1 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GegoTokenV1 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GegoTokenV1 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GegoTokenV1", id.toString(), this);
  }

  static load(id: string): GegoTokenV1 | null {
    return store.get("GegoTokenV1", id) as GegoTokenV1 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get grade(): BigInt {
    let value = this.get("grade");
    return value.toBigInt();
  }

  set grade(value: BigInt) {
    this.set("grade", Value.fromBigInt(value));
  }

  get quality(): BigInt {
    let value = this.get("quality");
    return value.toBigInt();
  }

  set quality(value: BigInt) {
    this.set("quality", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get blockNum(): BigInt {
    let value = this.get("blockNum");
    return value.toBigInt();
  }

  set blockNum(value: BigInt) {
    this.set("blockNum", Value.fromBigInt(value));
  }

  get resBaseId(): BigInt {
    let value = this.get("resBaseId");
    return value.toBigInt();
  }

  set resBaseId(value: BigInt) {
    this.set("resBaseId", Value.fromBigInt(value));
  }

  get author(): Bytes {
    let value = this.get("author");
    return value.toBytes();
  }

  set author(value: Bytes) {
    this.set("author", Value.fromBytes(value));
  }

  get erc20(): Bytes | null {
    let value = this.get("erc20");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set erc20(value: Bytes | null) {
    if (value === null) {
      this.unset("erc20");
    } else {
      this.set("erc20", Value.fromBytes(value as Bytes));
    }
  }

  get ruleId(): BigInt | null {
    let value = this.get("ruleId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ruleId(value: BigInt | null) {
    if (value === null) {
      this.unset("ruleId");
    } else {
      this.set("ruleId", Value.fromBigInt(value as BigInt));
    }
  }

  get nftType(): BigInt | null {
    let value = this.get("nftType");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftType(value: BigInt | null) {
    if (value === null) {
      this.unset("nftType");
    } else {
      this.set("nftType", Value.fromBigInt(value as BigInt));
    }
  }

  get tLevel(): BigInt | null {
    let value = this.get("tLevel");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tLevel(value: BigInt | null) {
    if (value === null) {
      this.unset("tLevel");
    } else {
      this.set("tLevel", Value.fromBigInt(value as BigInt));
    }
  }

  get version(): BigInt {
    let value = this.get("version");
    return value.toBigInt();
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }

  get isExist(): boolean {
    let value = this.get("isExist");
    return value.toBoolean();
  }

  set isExist(value: boolean) {
    this.set("isExist", Value.fromBoolean(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }
}

export class GegoTokenV2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GegoTokenV2 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GegoTokenV2 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GegoTokenV2", id.toString(), this);
  }

  static load(id: string): GegoTokenV2 | null {
    return store.get("GegoTokenV2", id) as GegoTokenV2 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get grade(): BigInt {
    let value = this.get("grade");
    return value.toBigInt();
  }

  set grade(value: BigInt) {
    this.set("grade", Value.fromBigInt(value));
  }

  get quality(): BigInt {
    let value = this.get("quality");
    return value.toBigInt();
  }

  set quality(value: BigInt) {
    this.set("quality", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get resBaseId(): BigInt {
    let value = this.get("resBaseId");
    return value.toBigInt();
  }

  set resBaseId(value: BigInt) {
    this.set("resBaseId", Value.fromBigInt(value));
  }

  get tLevel(): BigInt {
    let value = this.get("tLevel");
    return value.toBigInt();
  }

  set tLevel(value: BigInt) {
    this.set("tLevel", Value.fromBigInt(value));
  }

  get ruleId(): BigInt {
    let value = this.get("ruleId");
    return value.toBigInt();
  }

  set ruleId(value: BigInt) {
    this.set("ruleId", Value.fromBigInt(value));
  }

  get nftType(): BigInt {
    let value = this.get("nftType");
    return value.toBigInt();
  }

  set nftType(value: BigInt) {
    this.set("nftType", Value.fromBigInt(value));
  }

  get author(): Bytes {
    let value = this.get("author");
    return value.toBytes();
  }

  set author(value: Bytes) {
    this.set("author", Value.fromBytes(value));
  }

  get erc20(): Bytes {
    let value = this.get("erc20");
    return value.toBytes();
  }

  set erc20(value: Bytes) {
    this.set("erc20", Value.fromBytes(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get blockNum(): BigInt {
    let value = this.get("blockNum");
    return value.toBigInt();
  }

  set blockNum(value: BigInt) {
    this.set("blockNum", Value.fromBigInt(value));
  }

  get version(): BigInt {
    let value = this.get("version");
    return value.toBigInt();
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }

  get isExist(): boolean {
    let value = this.get("isExist");
    return value.toBoolean();
  }

  set isExist(value: boolean) {
    this.set("isExist", Value.fromBoolean(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }
}

export class BCFToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BCFToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BCFToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BCFToken", id.toString(), this);
  }

  static load(id: string): BCFToken | null {
    return store.get("BCFToken", id) as BCFToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get blockNum(): BigInt {
    let value = this.get("blockNum");
    return value.toBigInt();
  }

  set blockNum(value: BigInt) {
    this.set("blockNum", Value.fromBigInt(value));
  }

  get isExist(): boolean {
    let value = this.get("isExist");
    return value.toBoolean();
  }

  set isExist(value: boolean) {
    this.set("isExist", Value.fromBoolean(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }
}

export class MATHCON2 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MATHCON2 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MATHCON2 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MATHCON2", id.toString(), this);
  }

  static load(id: string): MATHCON2 | null {
    return store.get("MATHCON2", id) as MATHCON2 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get blockNum(): BigInt {
    let value = this.get("blockNum");
    return value.toBigInt();
  }

  set blockNum(value: BigInt) {
    this.set("blockNum", Value.fromBigInt(value));
  }

  get isExist(): boolean {
    let value = this.get("isExist");
    return value.toBoolean();
  }

  set isExist(value: boolean) {
    this.set("isExist", Value.fromBoolean(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }
}

export class BurgerNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BurgerNFT entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BurgerNFT entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BurgerNFT", id.toString(), this);
  }

  static load(id: string): BurgerNFT | null {
    return store.get("BurgerNFT", id) as BurgerNFT | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get blockNum(): BigInt {
    let value = this.get("blockNum");
    return value.toBigInt();
  }

  set blockNum(value: BigInt) {
    this.set("blockNum", Value.fromBigInt(value));
  }

  get isExist(): boolean {
    let value = this.get("isExist");
    return value.toBoolean();
  }

  set isExist(value: boolean) {
    this.set("isExist", Value.fromBoolean(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }
}

export class PancakeBunnie extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PancakeBunnie entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PancakeBunnie entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PancakeBunnie", id.toString(), this);
  }

  static load(id: string): PancakeBunnie | null {
    return store.get("PancakeBunnie", id) as PancakeBunnie | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get blockNum(): BigInt {
    let value = this.get("blockNum");
    return value.toBigInt();
  }

  set blockNum(value: BigInt) {
    this.set("blockNum", Value.fromBigInt(value));
  }

  get isExist(): boolean {
    let value = this.get("isExist");
    return value.toBoolean();
  }

  set isExist(value: boolean) {
    this.set("isExist", Value.fromBoolean(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }
}

export class BinanceNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BinanceNFT entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BinanceNFT entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BinanceNFT", id.toString(), this);
  }

  static load(id: string): BinanceNFT | null {
    return store.get("BinanceNFT", id) as BinanceNFT | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get blockNum(): BigInt {
    let value = this.get("blockNum");
    return value.toBigInt();
  }

  set blockNum(value: BigInt) {
    this.set("blockNum", Value.fromBigInt(value));
  }

  get isExist(): boolean {
    let value = this.get("isExist");
    return value.toBoolean();
  }

  set isExist(value: boolean) {
    this.set("isExist", Value.fromBoolean(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }
}

export class CocosNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CocosNFT entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CocosNFT entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CocosNFT", id.toString(), this);
  }

  static load(id: string): CocosNFT | null {
    return store.get("CocosNFT", id) as CocosNFT | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get grade(): BigInt {
    let value = this.get("grade");
    return value.toBigInt();
  }

  set grade(value: BigInt) {
    this.set("grade", Value.fromBigInt(value));
  }

  get quality(): BigInt {
    let value = this.get("quality");
    return value.toBigInt();
  }

  set quality(value: BigInt) {
    this.set("quality", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get resBaseId(): BigInt {
    let value = this.get("resBaseId");
    return value.toBigInt();
  }

  set resBaseId(value: BigInt) {
    this.set("resBaseId", Value.fromBigInt(value));
  }

  get tLevel(): BigInt {
    let value = this.get("tLevel");
    return value.toBigInt();
  }

  set tLevel(value: BigInt) {
    this.set("tLevel", Value.fromBigInt(value));
  }

  get ruleId(): BigInt {
    let value = this.get("ruleId");
    return value.toBigInt();
  }

  set ruleId(value: BigInt) {
    this.set("ruleId", Value.fromBigInt(value));
  }

  get nftType(): BigInt {
    let value = this.get("nftType");
    return value.toBigInt();
  }

  set nftType(value: BigInt) {
    this.set("nftType", Value.fromBigInt(value));
  }

  get author(): Bytes {
    let value = this.get("author");
    return value.toBytes();
  }

  set author(value: Bytes) {
    this.set("author", Value.fromBytes(value));
  }

  get erc20(): Bytes {
    let value = this.get("erc20");
    return value.toBytes();
  }

  set erc20(value: Bytes) {
    this.set("erc20", Value.fromBytes(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get blockNum(): BigInt {
    let value = this.get("blockNum");
    return value.toBigInt();
  }

  set blockNum(value: BigInt) {
    this.set("blockNum", Value.fromBigInt(value));
  }

  get version(): BigInt {
    let value = this.get("version");
    return value.toBigInt();
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }

  get isExist(): boolean {
    let value = this.get("isExist");
    return value.toBoolean();
  }

  set isExist(value: boolean) {
    this.set("isExist", Value.fromBoolean(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }
}

export class GegoSaleObj extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GegoSaleObj entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GegoSaleObj entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GegoSaleObj", id.toString(), this);
  }

  static load(id: string): GegoSaleObj | null {
    return store.get("GegoSaleObj", id) as GegoSaleObj | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get nft(): Bytes {
    let value = this.get("nft");
    return value.toBytes();
  }

  set nft(value: Bytes) {
    this.set("nft", Value.fromBytes(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get durationTime(): BigInt {
    let value = this.get("durationTime");
    return value.toBigInt();
  }

  set durationTime(value: BigInt) {
    this.set("durationTime", Value.fromBigInt(value));
  }

  get maxPrice(): BigInt {
    let value = this.get("maxPrice");
    return value.toBigInt();
  }

  set maxPrice(value: BigInt) {
    this.set("maxPrice", Value.fromBigInt(value));
  }

  get minPrice(): BigInt {
    let value = this.get("minPrice");
    return value.toBigInt();
  }

  set minPrice(value: BigInt) {
    this.set("minPrice", Value.fromBigInt(value));
  }

  get finalPrice(): BigInt {
    let value = this.get("finalPrice");
    return value.toBigInt();
  }

  set finalPrice(value: BigInt) {
    this.set("finalPrice", Value.fromBigInt(value));
  }

  get tipsFee(): BigInt {
    let value = this.get("tipsFee");
    return value.toBigInt();
  }

  set tipsFee(value: BigInt) {
    this.set("tipsFee", Value.fromBigInt(value));
  }

  get status(): BigInt {
    let value = this.get("status");
    return value.toBigInt();
  }

  set status(value: BigInt) {
    this.set("status", Value.fromBigInt(value));
  }

  get saleTx(): Bytes | null {
    let value = this.get("saleTx");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set saleTx(value: Bytes | null) {
    if (value === null) {
      this.unset("saleTx");
    } else {
      this.set("saleTx", Value.fromBytes(value as Bytes));
    }
  }

  get cancelTx(): Bytes | null {
    let value = this.get("cancelTx");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cancelTx(value: Bytes | null) {
    if (value === null) {
      this.unset("cancelTx");
    } else {
      this.set("cancelTx", Value.fromBytes(value as Bytes));
    }
  }

  get buyTx(): Bytes | null {
    let value = this.get("buyTx");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyTx(value: Bytes | null) {
    if (value === null) {
      this.unset("buyTx");
    } else {
      this.set("buyTx", Value.fromBytes(value as Bytes));
    }
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }
}

export class GegoSaleObjInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GegoSaleObjInfo entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GegoSaleObjInfo entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GegoSaleObjInfo", id.toString(), this);
  }

  static load(id: string): GegoSaleObjInfo | null {
    return store.get("GegoSaleObjInfo", id) as GegoSaleObjInfo | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get gegoSaleObj(): string {
    let value = this.get("gegoSaleObj");
    return value.toString();
  }

  set gegoSaleObj(value: string) {
    this.set("gegoSaleObj", Value.fromString(value));
  }

  get gegoTokenV1(): string | null {
    let value = this.get("gegoTokenV1");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set gegoTokenV1(value: string | null) {
    if (value === null) {
      this.unset("gegoTokenV1");
    } else {
      this.set("gegoTokenV1", Value.fromString(value as string));
    }
  }

  get gegoTokenV2(): string | null {
    let value = this.get("gegoTokenV2");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set gegoTokenV2(value: string | null) {
    if (value === null) {
      this.unset("gegoTokenV2");
    } else {
      this.set("gegoTokenV2", Value.fromString(value as string));
    }
  }

  get gegoArt(): string | null {
    let value = this.get("gegoArt");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set gegoArt(value: string | null) {
    if (value === null) {
      this.unset("gegoArt");
    } else {
      this.set("gegoArt", Value.fromString(value as string));
    }
  }

  get bcfToken(): string | null {
    let value = this.get("bcfToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bcfToken(value: string | null) {
    if (value === null) {
      this.unset("bcfToken");
    } else {
      this.set("bcfToken", Value.fromString(value as string));
    }
  }

  get mathcon2(): string | null {
    let value = this.get("mathcon2");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mathcon2(value: string | null) {
    if (value === null) {
      this.unset("mathcon2");
    } else {
      this.set("mathcon2", Value.fromString(value as string));
    }
  }

  get burgerNFT(): string | null {
    let value = this.get("burgerNFT");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set burgerNFT(value: string | null) {
    if (value === null) {
      this.unset("burgerNFT");
    } else {
      this.set("burgerNFT", Value.fromString(value as string));
    }
  }

  get pancakeBunnie(): string | null {
    let value = this.get("pancakeBunnie");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pancakeBunnie(value: string | null) {
    if (value === null) {
      this.unset("pancakeBunnie");
    } else {
      this.set("pancakeBunnie", Value.fromString(value as string));
    }
  }

  get binanceNFT(): string | null {
    let value = this.get("binanceNFT");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set binanceNFT(value: string | null) {
    if (value === null) {
      this.unset("binanceNFT");
    } else {
      this.set("binanceNFT", Value.fromString(value as string));
    }
  }

  get cocosNFT(): string | null {
    let value = this.get("cocosNFT");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cocosNFT(value: string | null) {
    if (value === null) {
      this.unset("cocosNFT");
    } else {
      this.set("cocosNFT", Value.fromString(value as string));
    }
  }

  get status(): BigInt {
    let value = this.get("status");
    return value.toBigInt();
  }

  set status(value: BigInt) {
    this.set("status", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get maxPrice(): BigInt | null {
    let value = this.get("maxPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("maxPrice");
    } else {
      this.set("maxPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get minPrice(): BigInt | null {
    let value = this.get("minPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("minPrice");
    } else {
      this.set("minPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get ruleId(): BigInt | null {
    let value = this.get("ruleId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ruleId(value: BigInt | null) {
    if (value === null) {
      this.unset("ruleId");
    } else {
      this.set("ruleId", Value.fromBigInt(value as BigInt));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get grade(): BigInt | null {
    let value = this.get("grade");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set grade(value: BigInt | null) {
    if (value === null) {
      this.unset("grade");
    } else {
      this.set("grade", Value.fromBigInt(value as BigInt));
    }
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }
}

export class EntityCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EntityCount entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EntityCount entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EntityCount", id.toString(), this);
  }

  static load(id: string): EntityCount | null {
    return store.get("EntityCount", id) as EntityCount | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}

export class Bondly extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bondly entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bondly entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bondly", id.toString(), this);
  }

  static load(id: string): Bondly | null {
    return store.get("Bondly", id) as Bondly | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get blockNum(): BigInt {
    let value = this.get("blockNum");
    return value.toBigInt();
  }

  set blockNum(value: BigInt) {
    this.set("blockNum", Value.fromBigInt(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get isExist(): boolean {
    let value = this.get("isExist");
    return value.toBoolean();
  }

  set isExist(value: boolean) {
    this.set("isExist", Value.fromBoolean(value));
  }
}

export class GegoSaleObj1155 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GegoSaleObj1155 entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GegoSaleObj1155 entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GegoSaleObj1155", id.toString(), this);
  }

  static load(id: string): GegoSaleObj1155 | null {
    return store.get("GegoSaleObj1155", id) as GegoSaleObj1155 | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get nft(): Bytes {
    let value = this.get("nft");
    return value.toBytes();
  }

  set nft(value: Bytes) {
    this.set("nft", Value.fromBytes(value));
  }

  get unitPrice(): BigInt {
    let value = this.get("unitPrice");
    return value.toBigInt();
  }

  set unitPrice(value: BigInt) {
    this.set("unitPrice", Value.fromBigInt(value));
  }

  get buyLogs(): Array<string> | null {
    let value = this.get("buyLogs");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set buyLogs(value: Array<string> | null) {
    if (value === null) {
      this.unset("buyLogs");
    } else {
      this.set("buyLogs", Value.fromStringArray(value as Array<string>));
    }
  }

  get status(): BigInt {
    let value = this.get("status");
    return value.toBigInt();
  }

  set status(value: BigInt) {
    this.set("status", Value.fromBigInt(value));
  }

  get saleTx(): Bytes | null {
    let value = this.get("saleTx");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set saleTx(value: Bytes | null) {
    if (value === null) {
      this.unset("saleTx");
    } else {
      this.set("saleTx", Value.fromBytes(value as Bytes));
    }
  }

  get cancelTx(): Bytes | null {
    let value = this.get("cancelTx");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cancelTx(value: Bytes | null) {
    if (value === null) {
      this.unset("cancelTx");
    } else {
      this.set("cancelTx", Value.fromBytes(value as Bytes));
    }
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }
}

export class GegoSaleObj1155Info extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GegoSaleObj1155Info entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GegoSaleObj1155Info entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GegoSaleObj1155Info", id.toString(), this);
  }

  static load(id: string): GegoSaleObj1155Info | null {
    return store.get("GegoSaleObj1155Info", id) as GegoSaleObj1155Info | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get gegoSaleObj1155(): string {
    let value = this.get("gegoSaleObj1155");
    return value.toString();
  }

  set gegoSaleObj1155(value: string) {
    this.set("gegoSaleObj1155", Value.fromString(value));
  }

  get bondly(): string | null {
    let value = this.get("bondly");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bondly(value: string | null) {
    if (value === null) {
      this.unset("bondly");
    } else {
      this.set("bondly", Value.fromString(value as string));
    }
  }

  get status(): BigInt {
    let value = this.get("status");
    return value.toBigInt();
  }

  set status(value: BigInt) {
    this.set("status", Value.fromBigInt(value));
  }

  get unitPrice(): BigInt | null {
    let value = this.get("unitPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set unitPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("unitPrice");
    } else {
      this.set("unitPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get createdTime(): BigInt {
    let value = this.get("createdTime");
    return value.toBigInt();
  }

  set createdTime(value: BigInt) {
    this.set("createdTime", Value.fromBigInt(value));
  }
}

export class BuyLog extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BuyLog entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BuyLog entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BuyLog", id.toString(), this);
  }

  static load(id: string): BuyLog | null {
    return store.get("BuyLog", id) as BuyLog | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get tipsFee(): BigInt {
    let value = this.get("tipsFee");
    return value.toBigInt();
  }

  set tipsFee(value: BigInt) {
    this.set("tipsFee", Value.fromBigInt(value));
  }
}
